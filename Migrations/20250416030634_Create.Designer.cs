// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using _2025毕业设计.Context;

#nullable disable

namespace _2025毕业设计.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    [Migration("20250416030634_Create")]
    partial class Create
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("_2025毕业设计.Models.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"));

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<byte[]>("AdminImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("AdminName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("AdminPassword")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("AdminId");

                    b.HasIndex("AdminName")
                        .IsUnique();

                    b.HasIndex("DepartmentId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("_2025毕业设计.Models.Award", b =>
                {
                    b.Property<int>("AwardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AwardId"));

                    b.Property<string>("AwardDescription")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AwardName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CoverImage")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte[]>("CoverImageData")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("MaxVoteCount")
                        .HasColumnType("int");

                    b.HasKey("AwardId");

                    b.ToTable("Awards");
                });

            modelBuilder.Entity("_2025毕业设计.Models.CommentRecord", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<int>("AwardId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CommentTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CommenterAdminId")
                        .HasColumnType("int");

                    b.Property<int?>("CommenterEmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("CommenterSupAdminId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DeletedByAdminId")
                        .HasColumnType("int");

                    b.Property<int?>("DeletedBySupAdminId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("NominationId")
                        .HasColumnType("int");

                    b.HasKey("CommentId");

                    b.HasIndex("AwardId");

                    b.HasIndex("CommenterAdminId");

                    b.HasIndex("CommenterEmployeeId");

                    b.HasIndex("CommenterSupAdminId");

                    b.HasIndex("DeletedByAdminId");

                    b.HasIndex("DeletedBySupAdminId");

                    b.HasIndex("NominationId");

                    b.ToTable("CommentRecords");
                });

            modelBuilder.Entity("_2025毕业设计.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("DepartmentId");

                    b.HasIndex("DepartmentName")
                        .IsUnique();

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("_2025毕业设计.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("EmployeeFileData")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("EmployeeImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("EmployeePassword")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("Email");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("_2025毕业设计.Models.Nomination", b =>
                {
                    b.Property<int>("NominationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NominationId"));

                    b.Property<int>("AwardId")
                        .HasColumnType("int");

                    b.Property<int>("CommentCount")
                        .HasColumnType("int");

                    b.Property<byte[]>("CoverImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Introduction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastCommentPreview")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastCommentTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastCommenterAdminId")
                        .HasColumnType("int");

                    b.Property<int?>("LastCommenterEmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("LastCommenterSupAdminId")
                        .HasColumnType("int");

                    b.Property<string>("NominateReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NominatedAdminId")
                        .HasColumnType("int");

                    b.Property<int?>("NominatedEmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("NominationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProposerAdminId")
                        .HasColumnType("int");

                    b.Property<int?>("ProposerEmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("ProposerSupAdminId")
                        .HasColumnType("int");

                    b.HasKey("NominationId");

                    b.HasIndex("AwardId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("NominatedAdminId");

                    b.HasIndex("NominatedEmployeeId");

                    b.HasIndex("ProposerAdminId");

                    b.HasIndex("ProposerEmployeeId");

                    b.HasIndex("ProposerSupAdminId");

                    b.ToTable("Nominations");
                });

            modelBuilder.Entity("_2025毕业设计.Models.NominationDeclaration", b =>
                {
                    b.Property<int>("DeclarationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeclarationId"));

                    b.Property<int>("AwardId")
                        .HasColumnType("int");

                    b.Property<byte[]>("CoverImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("DeclarationReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeclarationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeclarerAdminId")
                        .HasColumnType("int");

                    b.Property<int?>("DeclarerEmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("DeclarerSupAdminId")
                        .HasColumnType("int");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Introduction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPromoted")
                        .HasColumnType("bit");

                    b.Property<int?>("NominatedAdminId")
                        .HasColumnType("int");

                    b.Property<int?>("NominatedEmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("PromotedNominationId")
                        .HasColumnType("int");

                    b.Property<string>("ReviewComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReviewTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ReviewerAdminId")
                        .HasColumnType("int");

                    b.Property<int?>("ReviewerEmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("ReviewerSupAdminId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("DeclarationId");

                    b.HasIndex("AwardId");

                    b.HasIndex("DeclarerAdminId");

                    b.HasIndex("DeclarerEmployeeId");

                    b.HasIndex("DeclarerSupAdminId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("NominatedAdminId");

                    b.HasIndex("NominatedEmployeeId");

                    b.HasIndex("ReviewerAdminId");

                    b.HasIndex("ReviewerEmployeeId");

                    b.HasIndex("ReviewerSupAdminId");

                    b.ToTable("NominationDeclarations");
                });

            modelBuilder.Entity("_2025毕业设计.Models.NominationLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DeclarationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OperationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("OperationType")
                        .HasColumnType("int");

                    b.Property<int?>("OperatorAdminId")
                        .HasColumnType("int");

                    b.Property<int?>("OperatorEmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("OperatorSupAdminId")
                        .HasColumnType("int");

                    b.HasKey("LogId");

                    b.HasIndex("DeclarationId");

                    b.HasIndex("OperatorAdminId");

                    b.HasIndex("OperatorEmployeeId");

                    b.HasIndex("OperatorSupAdminId");

                    b.ToTable("NominationLogs");
                });

            modelBuilder.Entity("_2025毕业设计.Models.SupAdmin", b =>
                {
                    b.Property<int>("SupAdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupAdminId"));

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<byte[]>("SupAdminImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SupAdminName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SupAdminPassword")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("SupAdminId");

                    b.HasIndex("SupAdminName")
                        .IsUnique();

                    b.ToTable("SupAdmins");
                });

            modelBuilder.Entity("_2025毕业设计.Models.VoteRecord", b =>
                {
                    b.Property<int>("VoteRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VoteRecordId"));

                    b.Property<int>("AwardId")
                        .HasColumnType("int");

                    b.Property<int>("NominationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("VoteTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("VoterAdminId")
                        .HasColumnType("int");

                    b.Property<int?>("VoterEmployeeId")
                        .HasColumnType("int");

                    b.HasKey("VoteRecordId");

                    b.HasIndex("AwardId");

                    b.HasIndex("NominationId");

                    b.HasIndex("VoterAdminId");

                    b.HasIndex("VoterEmployeeId");

                    b.ToTable("VoteRecords");
                });

            modelBuilder.Entity("_2025毕业设计.Models.Admin", b =>
                {
                    b.HasOne("_2025毕业设计.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("_2025毕业设计.Models.CommentRecord", b =>
                {
                    b.HasOne("_2025毕业设计.Models.Award", "Award")
                        .WithMany()
                        .HasForeignKey("AwardId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("_2025毕业设计.Models.Admin", "CommenterAdmin")
                        .WithMany()
                        .HasForeignKey("CommenterAdminId");

                    b.HasOne("_2025毕业设计.Models.Employee", "CommenterEmployee")
                        .WithMany()
                        .HasForeignKey("CommenterEmployeeId");

                    b.HasOne("_2025毕业设计.Models.SupAdmin", "CommenterSupAdmin")
                        .WithMany()
                        .HasForeignKey("CommenterSupAdminId");

                    b.HasOne("_2025毕业设计.Models.Admin", "DeletedByAdmin")
                        .WithMany()
                        .HasForeignKey("DeletedByAdminId");

                    b.HasOne("_2025毕业设计.Models.SupAdmin", "DeletedBySupAdmin")
                        .WithMany()
                        .HasForeignKey("DeletedBySupAdminId");

                    b.HasOne("_2025毕业设计.Models.Nomination", "Nomination")
                        .WithMany("CommentRecords")
                        .HasForeignKey("NominationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Award");

                    b.Navigation("CommenterAdmin");

                    b.Navigation("CommenterEmployee");

                    b.Navigation("CommenterSupAdmin");

                    b.Navigation("DeletedByAdmin");

                    b.Navigation("DeletedBySupAdmin");

                    b.Navigation("Nomination");
                });

            modelBuilder.Entity("_2025毕业设计.Models.Employee", b =>
                {
                    b.HasOne("_2025毕业设计.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("_2025毕业设计.Models.Nomination", b =>
                {
                    b.HasOne("_2025毕业设计.Models.Award", "Award")
                        .WithMany("Nominations")
                        .HasForeignKey("AwardId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("_2025毕业设计.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("_2025毕业设计.Models.Admin", "NominatedAdmin")
                        .WithMany()
                        .HasForeignKey("NominatedAdminId");

                    b.HasOne("_2025毕业设计.Models.Employee", "NominatedEmployee")
                        .WithMany()
                        .HasForeignKey("NominatedEmployeeId");

                    b.HasOne("_2025毕业设计.Models.Admin", "ProposerAdmin")
                        .WithMany()
                        .HasForeignKey("ProposerAdminId");

                    b.HasOne("_2025毕业设计.Models.Employee", "ProposerEmployee")
                        .WithMany()
                        .HasForeignKey("ProposerEmployeeId");

                    b.HasOne("_2025毕业设计.Models.SupAdmin", "ProposerSupAdmin")
                        .WithMany()
                        .HasForeignKey("ProposerSupAdminId");

                    b.Navigation("Award");

                    b.Navigation("Department");

                    b.Navigation("NominatedAdmin");

                    b.Navigation("NominatedEmployee");

                    b.Navigation("ProposerAdmin");

                    b.Navigation("ProposerEmployee");

                    b.Navigation("ProposerSupAdmin");
                });

            modelBuilder.Entity("_2025毕业设计.Models.NominationDeclaration", b =>
                {
                    b.HasOne("_2025毕业设计.Models.Award", "Award")
                        .WithMany()
                        .HasForeignKey("AwardId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("_2025毕业设计.Models.Admin", "DeclarerAdmin")
                        .WithMany()
                        .HasForeignKey("DeclarerAdminId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("_2025毕业设计.Models.Employee", "DeclarerEmployee")
                        .WithMany()
                        .HasForeignKey("DeclarerEmployeeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("_2025毕业设计.Models.SupAdmin", "DeclarerSupAdmin")
                        .WithMany()
                        .HasForeignKey("DeclarerSupAdminId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("_2025毕业设计.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("_2025毕业设计.Models.Admin", "NominatedAdmin")
                        .WithMany()
                        .HasForeignKey("NominatedAdminId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("_2025毕业设计.Models.Employee", "NominatedEmployee")
                        .WithMany()
                        .HasForeignKey("NominatedEmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("_2025毕业设计.Models.Admin", "ReviewerAdmin")
                        .WithMany()
                        .HasForeignKey("ReviewerAdminId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("_2025毕业设计.Models.Employee", "ReviewerEmployee")
                        .WithMany()
                        .HasForeignKey("ReviewerEmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("_2025毕业设计.Models.SupAdmin", "ReviewerSupAdmin")
                        .WithMany()
                        .HasForeignKey("ReviewerSupAdminId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Award");

                    b.Navigation("DeclarerAdmin");

                    b.Navigation("DeclarerEmployee");

                    b.Navigation("DeclarerSupAdmin");

                    b.Navigation("Department");

                    b.Navigation("NominatedAdmin");

                    b.Navigation("NominatedEmployee");

                    b.Navigation("ReviewerAdmin");

                    b.Navigation("ReviewerEmployee");

                    b.Navigation("ReviewerSupAdmin");
                });

            modelBuilder.Entity("_2025毕业设计.Models.NominationLog", b =>
                {
                    b.HasOne("_2025毕业设计.Models.NominationDeclaration", "Declaration")
                        .WithMany()
                        .HasForeignKey("DeclarationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_2025毕业设计.Models.Admin", "OperatorAdmin")
                        .WithMany()
                        .HasForeignKey("OperatorAdminId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("_2025毕业设计.Models.Employee", "OperatorEmployee")
                        .WithMany()
                        .HasForeignKey("OperatorEmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("_2025毕业设计.Models.SupAdmin", "OperatorSupAdmin")
                        .WithMany()
                        .HasForeignKey("OperatorSupAdminId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Declaration");

                    b.Navigation("OperatorAdmin");

                    b.Navigation("OperatorEmployee");

                    b.Navigation("OperatorSupAdmin");
                });

            modelBuilder.Entity("_2025毕业设计.Models.VoteRecord", b =>
                {
                    b.HasOne("_2025毕业设计.Models.Award", "Award")
                        .WithMany()
                        .HasForeignKey("AwardId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("_2025毕业设计.Models.Nomination", "Nomination")
                        .WithMany("VoteRecords")
                        .HasForeignKey("NominationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("_2025毕业设计.Models.Admin", "VoterAdmin")
                        .WithMany()
                        .HasForeignKey("VoterAdminId");

                    b.HasOne("_2025毕业设计.Models.Employee", "VoterEmployee")
                        .WithMany()
                        .HasForeignKey("VoterEmployeeId");

                    b.Navigation("Award");

                    b.Navigation("Nomination");

                    b.Navigation("VoterAdmin");

                    b.Navigation("VoterEmployee");
                });

            modelBuilder.Entity("_2025毕业设计.Models.Award", b =>
                {
                    b.Navigation("Nominations");
                });

            modelBuilder.Entity("_2025毕业设计.Models.Nomination", b =>
                {
                    b.Navigation("CommentRecords");

                    b.Navigation("VoteRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
